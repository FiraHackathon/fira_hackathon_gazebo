#!/usr/bin/env python3
import sys
from pymap3d import enu
import json
import xml.etree.ElementTree as ET
import numpy as np
from scipy.spatial.transform import Rotation
import random
import math


VINEYARD_KEYWORD = 'vineyard'
CROPS_FIELD_KEYWORD = 'crop field'


def extract_anchor(root: ET.Element):
    coords = root.find('./world/spherical_coordinates')
    anchor = (
        float(coords.findtext('latitude_deg')),
        float(coords.findtext('longitude_deg')),
        float(coords.findtext('elevation')),
    )
    return anchor


def extract_models_pos(root: ET.Element, anchor: list, prefix: str):
    data = []
    models = root.findall('./world/state/model')

    for model in models:
        if model.attrib['name'].startswith(prefix):
            str_values = model.findtext('pose').split(' ')[0:3]
            pos = tuple(map(float, str_values))
            # coords = enu.enu2geodetic(*pos, *anchor)
            data.append(list(pos) + [0., 0., random.uniform(0., math.tau)])
            
    return data


def extract_initial_poses(root: ET.Element, prefix: str):
    poses = []
    models = root.findall('./world/include')

    for model in models:
        if model.findtext('name').startswith(prefix):
            str_values = model.findtext('pose').split(' ')
            poses.append(list(map(float, str_values)))
            
    return poses


def transform_points(pose, points, anchor):
    rot = Rotation.from_euler('xyz', pose[3:6])
    map_points = rot.apply(points) + np.array(pose[0:3])

    geo_points = []
    for point in map_points:
        coords = enu.enu2geodetic(*point, *anchor)
        geo_points.append(list(coords) + point.tolist())

    return geo_points


def generate_data(world_filename):
    root = ET.parse(world_filename).getroot()

    anchor = extract_anchor(root)
    data = {
        'crop_field': extract_initial_poses(root, 'crop field'),
        'vineyard': extract_initial_poses(root, 'vineyard'),
        'obstacle_iso18497': extract_models_pos(root, anchor, 'obstacle'),
        'human': extract_models_pos(root, anchor, 'Construction Cone'),
    }
    return data


def write_csv_line(file, type: str, point):
    file.write(f"{type},{','.join(map(str, point))}\n")


def save_csv(data, filename):
    file = open(filename, 'w')
    file.write('type,x,y,z,roll,pitch,yaw\n')

    for point in data['crop_field']:
        write_csv_line(file, 'crop_field', point)
    for point in data['vineyard']:
        write_csv_line(file, 'vineyard', point)
    for point in data['obstacle_iso18497']:
        write_csv_line(file, 'obstacle_iso18497', point)
    for point in data['human']:
        write_csv_line(file, 'human', point)

    file.close()


def main(argv):
    if len(argv) < 3:
        print(f"Syntax: {argv[0]} <world_file> <output_file_base>", file=sys.stderr)
        exit(1)

    world_filename = argv[1]
    output_name = argv[2]

    data = generate_data(world_filename)
    save_csv(data, output_name + '.csv')


if __name__ == '__main__':
    main(sys.argv)
