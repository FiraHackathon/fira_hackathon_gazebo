#!/usr/bin/env python3
import sys
from pymap3d import enu
import json
import xml.etree.ElementTree as ET
import numpy as np
from scipy.spatial.transform import Rotation


MODEL_KEYWORD = 'Construction Cone'
VINEYARD_KEYWORD = 'vineyard'
CROPS_FIELD_KEYWORD = 'crop field'


def extract_anchor(root: ET.Element):
    coords = root.find('./world/spherical_coordinates')
    anchor = (
        float(coords.findtext('latitude_deg')),
        float(coords.findtext('longitude_deg')),
        float(coords.findtext('elevation')),
    )
    return anchor


def extract_models_pos(root: ET.Element, anchor: list, prefix: str):
    data = []
    models = root.findall('./world/model')

    for model in models:
        if model.attrib['name'].startswith(prefix):
            str_values = model.findtext('pose').split(' ')[0:3]
            pos = tuple(map(float, str_values))
            coords = enu.enu2geodetic(*pos, *anchor)
            data.append(list(coords) + list(pos))
            
    return data


def extract_initial_poses(root: ET.Element, prefix: str):
    poses = []
    models = root.findall('./world/include')

    for model in models:
        if model.findtext('name').startswith(prefix):
            str_values = model.findtext('pose').split(' ')
            poses.append(list(map(float, str_values)))
            
    return poses


def transform_points(pose, points, anchor):
    rot = Rotation.from_euler('xyz', pose[3:6])
    map_points = rot.apply(points) + np.array(pose[0:3])

    geo_points = []
    for point in map_points:
        coords = enu.enu2geodetic(*point, *anchor)
        geo_points.append(list(coords) + point.tolist())

    return geo_points


def generate_vineyards(root: ET.Element, anchor: list):
    vineyard_points = [
        [1.0,   0.0, 0.0],
        [1.0, -15.0, 0.0],
        [7.0, -15.0, 0.0],
        [7.0,   0.0, 0.0],
    ]

    data = []
    poses = extract_initial_poses(root, VINEYARD_KEYWORD)
    for pose in poses:
        points = transform_points(pose, vineyard_points, anchor)
        data.append({
            'type': 'vineyard',
            'row_distance': 2.0,
            'points': points,
        })

    return data


def generate_crop_fields(root: ET.Element, anchor: list):
    crop_field_points = [
        [1.5,    0.0, 0.0],
        [0.95, -15.0, 0.0],
        [5.45, -15.0, 0.0],
        [6.0,    0.0, 0.0],
    ]

    data = []
    poses = extract_initial_poses(root, CROPS_FIELD_KEYWORD)
    for pose in poses:
        points = transform_points(pose, crop_field_points, anchor)
        data.append({
            'type': 'crops',
            'row_distance': 1.5,
            'points': points,
        })

    return data


def generate_data(world_filename):
    root = ET.parse(world_filename).getroot()

    anchor = extract_anchor(root)
    waypoints = extract_models_pos(root, anchor, MODEL_KEYWORD)

    data = {
        'origin': anchor,
        'start': waypoints[0],
        'end': waypoints[1],
        'waypoints': waypoints[2:],
        'fields': generate_vineyards(root, anchor) + generate_crop_fields(root, anchor),
    }
    return data


def write_csv_line(file, type: str, point):
    file.write(f"{type},{','.join(map(str, point))}\n")


def save_csv(data, filename):
    file = open(filename, 'w')
    file.write('type,latitude,longitude,altitude,x,y,z\n')
    write_csv_line(file, 'start', data['start'])
    write_csv_line(file, 'end', data['end'])

    for point in data['waypoints']:
        write_csv_line(file, 'waypoint', point)

    for field in data['fields']:
        type = f"field:{field['type']}"
        for point in field['points']:
            write_csv_line(file, type, point)

    file.close()


def create_geojson_point(point: list, type: str, extra_properties={}):
    properties = {
        'type': type,
        'xyz': point[3:6],
    }
    properties.update(extra_properties)

    return {
        'type': 'Feature',
        'properties': properties,
        'geometry': {
            'coordinates': [point[1], point[0], point[2]],
            'type': 'Point'
        },
    }


def save_geojson(data, filename):
    features = [create_geojson_point(data['start'], 'start')]
    features.append(create_geojson_point(data['end'], 'end'))
    features += [create_geojson_point(point, 'waypoint') for point in data['waypoints']]

    for field in data['fields']:
        features += [create_geojson_point(point, 'field', {'name': field['type']})
                     for point in field['points']]

    root = {
        'type': 'FeatureCollection',
        'features': features,
    }

    with open(filename, 'w') as file:
        json.dump(root, file, indent=2)


def save_json(data, filename):
    with open(filename, 'w') as file:
        json.dump(data, file, indent=2)


def main(argv):
    if len(argv) < 3:
        print(f"Syntax: {argv[0]} <world_file> <output_file_base>", file=sys.stderr)
        exit(1)

    world_filename = argv[1]
    output_name = argv[2]

    data = generate_data(world_filename)
    save_csv(data, output_name + '.csv')
    save_geojson(data, output_name + '.geojson')
    save_json(data, output_name + '.json')


if __name__ == '__main__':
    main(sys.argv)
